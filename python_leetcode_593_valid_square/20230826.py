p1 = [0,0]; p2 = [1,1]; p3 = [1,0]; p4 = [0,1]  # Output: true
p1 = [1,1]; p2 = [5,3]; p3 = [3,5]; p4 = [7,7]


import numpy as np

class Solution:
    def validSquare(self, p1, p2, p3, p4) -> bool:
        p1 = np.array(p1)
        p2 = np.array(p2)
        p3 = np.array(p3)
        p4 = np.array(p4)

        if len(set([tuple(p1), tuple(p2), tuple(p3), tuple(p4)]))!=4:
            return False

        if      (p1[1]-p2[1])**2+(p1[0]-p2[0])**2 == (p2[1]-p3[1])**2+(p2[0]-p3[0])**2 == (p3[1]-p4[1])**2+(p3[0]-p4[0])**2 == (p4[1]-p1[1])**2+(p4[0]-p1[0])**2:
            if      (p1[1]-p3[1])**2+(p1[0]-p3[0])**2 == (p2[1]-p4[1])**2+(p2[0]-p4[0])**2:
                return True
        elif    (p1[1]-p3[1])**2+(p1[0]-p3[0])**2 == (p3[1]-p2[1])**2+(p3[0]-p2[0])**2 == (p2[1]-p4[1])**2+(p2[0]-p4[0])**2 == (p4[1]-p1[1])**2+(p4[0]-p1[0])**2:
            if      (p1[1]-p2[1])**2+(p1[0]-p2[0])**2 == (p3[1]-p4[1])**2+(p3[0]-p4[0])**2:
                return True
        elif    (p1[1]-p3[1])**2+(p1[0]-p3[0])**2 == (p3[1]-p4[1])**2+(p3[0]-p4[0])**2 == (p4[1]-p2[1])**2+(p4[0]-p2[0])**2 == (p2[1]-p1[1])**2+(p2[0]-p1[0])**2:
            if      (p1[1]-p4[1])**2+(p1[0]-p4[0])**2 == (p2[1]-p3[1])**2+(p2[0]-p3[0])**2:
                return True
        elif    (p1[1]-p4[1])**2+(p1[0]-p4[0])**2 == (p4[1]-p2[1])**2+(p4[0]-p2[0])**2 == (p2[1]-p3[1])**2+(p2[0]-p3[0])**2 == (p3[1]-p1[1])**2+(p3[0]-p1[0])**2:
            if      (p1[1]-p2[1])**2+(p1[0]-p2[0])**2 == (p4[1]-p3[1])**2+(p4[0]-p3[0])**2:
                return True
        else:
            False