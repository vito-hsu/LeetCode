
nums
nums
nums = [4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,28,28,28,28,28,28,28,28,32,32,32,32,32,32,32,32,36,36,36,36,36,36,36,36,40,40,40,40,40,40,40,40,44,44,44,44,44,44,44,44,48,48,48,48,48,48,48,48,52,52,52,52,52,52,52,52,56,56,56,56,56,56,56,56,60,60,60,60,60,60,60,60,64,64,64,64,64,64,64,64,68,68,68,68,68,68,68,68,72,72,72,72,72,72,72,72,76,76,76,76,76,76,76,76,80,80,80,80,80,80,80,80,84,84,84,84,84,84,84,84,88,88,88,88,88,88,88,88,92,92,92,92,92,92,92,92,96,96,96,96,96,96,96,96,97,99]


# def subset_sums(nums, k):
#     dp = [set() for _ in range(k + 1)]
#     dp[0].add(0)

#     for num in nums:
#         for i in range(k, 0, -1):
#             for prev_sum in dp[i - 1]:
#                 dp[i].add(prev_sum + num)

#     return sorted(dp[k])

# # 示例输入
# # nums
# # k = 100
# # possible_sums = subset_sums(nums, k)
# # print(possible_sums)


# class Solution:
#     def canPartition(self, nums) -> bool:
#         list_sum = sum(nums)
#         key_sum = list_sum
#         if key_sum/2 in nums:
#             return True
#         if int(key_sum/2)!=key_sum/2:
#             return False
#         for r in range(1, 100):
#             print(r)
#             if sum(sorted(nums)[len(nums)-r:])<sum(sorted(nums)[:len(nums)-r]):
#                 print('skip1')
#                 continue            
#             if sum(sorted(nums)[len(nums)-r:])<key_sum/2:    # r=50
#                 print('skip2')
#                 continue
#             if key_sum/2 in subset_sums(nums, r):
#                 return True
#         return False


# ans = Solution()
# ans.canPartition(nums=nums)


